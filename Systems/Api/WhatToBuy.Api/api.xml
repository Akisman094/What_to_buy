<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WhatToBuy.Api</name>
    </assembly>
    <members>
        <member name="T:WhatToBuy.Api.Configuration.AutoMapperConfiguration">
            <summary>
            AutoMapper configuration
            </summary>
        </member>
        <member name="M:WhatToBuy.Api.Configuration.AutoMapperConfiguration.AddAppAutoMappers(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add automappers
            </summary>
            <param name="services">Services collection</param>
        </member>
        <member name="T:WhatToBuy.Api.Configuration.CorsConfiguration">
            <summary>
            CORS configuration
            </summary>
        </member>
        <member name="M:WhatToBuy.Api.Configuration.CorsConfiguration.AddAppCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add CORS
            </summary>
            <param name="services">Services collection</param>
        </member>
        <member name="M:WhatToBuy.Api.Configuration.CorsConfiguration.UseAppCors(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use service
            </summary>
            <param name="app">Application</param>
        </member>
        <member name="T:WhatToBuy.Api.Configuration.LoggerConfiguration">
            <summary>
            Logger Configuration
            </summary>
        </member>
        <member name="M:WhatToBuy.Api.Configuration.LoggerConfiguration.AddAppLogger(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Add logger
            </summary>
        </member>
        <member name="T:WhatToBuy.Api.Configuration.SwaggerConfiguration">
            <summary>
            Swagger configuration
            </summary>
        </member>
        <member name="M:WhatToBuy.Api.Configuration.SwaggerConfiguration.AddAppSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection,WhatToBuy.Services.Settings.SwaggerSettings,WhatToBuy.Services.Settings.IdentitySettings)">
            <summary>
            Add OpenAPI for API
            </summary>
            <param name="services">Services collection</param>
        </member>
        <member name="M:WhatToBuy.Api.Configuration.SwaggerConfiguration.UseAppSwagger(Microsoft.AspNetCore.Builder.WebApplication,WhatToBuy.Services.Settings.SwaggerSettings)">
            <summary>
            Start OpenAPI UI
            </summary>
            <param name="app">Web application</param>
        </member>
        <member name="T:WhatToBuy.Api.Configuration.VersioningConfiguration">
            <summary>
            Versioning configuration
            </summary>
        </member>
        <member name="M:WhatToBuy.Api.Configuration.VersioningConfiguration.AddAppVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add version support for API
            </summary>
            <param name="services">Services collection</param>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.Family.FamilyController.GetAll">
            <summary>
            Get all families.
            </summary>
            <response code="200">A list of all families.</response>
            <response code="400">If no families avaliable</response>
            <response code="401">If user is not admin</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.Family.FamilyController.GetById">
            <summary>
            Get Users own family.
            </summary>
            <response code="200">Returns a family.</response>
            <response code="400">If the user is not in a family</response>
            <response code="401">User is trying to access family, while he is not in it</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.Family.FamilyController.Update(System.Int32,WhatToBuy.Api.Controllers.Family.Models.FamilyUpdateRequestDto)">
            <summary>
            Change family name.
            </summary>
            <param name="id">The id of the family to update.</param>
            <param name="familyDto">The updated data for the family.</param>
            <response code="200">Returns a family.</response>
            <response code="400">If the user is not in a family</response>
            <response code="401">User is trying to modify family, while he is not in it</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ItemController.GetItems">
            <summary>
            Gets all items.
            </summary>
            <returns>The requested item.</returns>
            <response code="200">The requested item.</response>
            <response code="400">No items avaliable.</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ItemController.GetItemById(System.Int32)">
            <summary>
            Gets an item by ID.
            </summary>
            <param name="id">The ID of the item to get.</param>
            <returns>The requested item.</returns>
            <response code="200">The requested item.</response>
            <response code="404">The item with the specified ID was not found.</response>
            <response code="401">User is trying to access item that he is not authorized to access</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ItemController.CreateItem(WhatToBuy.Api.Controllers.Models.ItemAddRequestDto)">
            <summary>
            Creates a new item.
            </summary>
            <param name="itemRequestDto">The data for the new item.</param>
            <returns>The created item.</returns>
            <response code="200">The created item.</response>
            <response code="400">The request data was invalid.</response>
            <response code="401">User is trying to access item that he is not authorized to access</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ItemController.UpdateItem(System.Int32,WhatToBuy.Api.Controllers.Models.ItemUpdateRequestDto)">
            <summary>
            Updates an existing item.
            </summary>
            <param name="id">The ID of the item to update.</param>
            <param name="itemRequestDto">The updated data for the item.</param>
            <returns>A response with no content.</returns>
            <response code="200">The item was updated successfully.</response>
            <response code="400">The request data was invalid or item with specified id not found.</response>
            <response code="401">User is trying to access item that he is not authorized to access</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ItemController.Delete(System.Int32)">
            <summary>
            Deletes a specific item by ID.
            </summary>
            <param name="id">The ID of the item to be deleted.</param>
            <response code="200">Item was successfully deleted.</response>
            <response code="400">Item with specified ID not found.</response>
            <response code="401">User is trying to access item that he is not authorized to access</response>
        </member>
        <member name="T:WhatToBuy.Api.Controllers.RedirectToSwaggerController">
            <summary>
            Controller to redirect from domain name to swagger
            </summary>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.RedirectToSwaggerController.RedirectToSwaggerUi">
            <summary>
            Redirects from domain name to swagger
            </summary>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ShoppingList.ShoppingListsController.GetAll">
            <summary>
            Retrieves all shopping lists.
            </summary>
            <response code="200">Returns the list of shopping lists.</response>
            <response code="400">If no Shopping lists avaliable</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ShoppingList.ShoppingListsController.Get(System.Int32)">
            <summary>
            Retrieves a specific shopping list.
            </summary>
            <param name="id">The ID of the shopping list to retrieve.</param>
            <response code="200">Returns the requested shopping list.</response>
            <response code="400">If the shopping list was not found.</response>
            <response code="401">If user is accessing shopping list that is not his familie's</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ShoppingList.ShoppingListsController.Create(WhatToBuy.Api.Controllers.Models.AddShoppingListRequestDto)">
            <summary>
            Creates a new shopping list.
            </summary>
            <param name="request">The details of the shopping list to create.</param>
            <response code="200">Returns the newly created shopping list.</response>
            <response code="400">If the request data is invalid.</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ShoppingList.ShoppingListsController.UpdateShoppingList(System.Int32,WhatToBuy.Api.Controllers.Models.ShoppingListUpdateRequestDto)">
            <summary>
            Updates a shopping list with the specified ID.
            </summary>
            <param name="id">The ID of the shopping list to update.</param>
            <param name="request">The update request.</param>
            <returns>The updated shopping list.</returns>
            <response code="200">Returns the updated shopping list.</response>
            <response code="400">If shopping list cannot be found or if request is invalid</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ShoppingList.ShoppingListsController.DeleteShoppingList(System.Int32)">
            <summary>
            Deletes a shopping list with the specified ID.
            </summary>
            <param name="id">The ID of the shopping list to delete.</param>
            <returns>No content.</returns>
            <response code="200">The shopping list was deleted successfully.</response>
            <response code="400">If the shopping list could not be found.</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.ShoppingList.ShoppingListsController.SendToEmail(System.Int32,WhatToBuy.Api.Controllers.ShoppingList.Models.SendToEmailRequestDto)">
            <summary>
            Sends information about shopping list to a specified email
            </summary>
            <param name="id">The ID of the shopping list to be sent.</param>
            <returns>Returns whether the request was passed.</returns>
            <response code="200">Request was passed successfully</response>
            <response code="400">If the shopping list could not be found.</response>
            <response code="401">If user is accessing shopping list that is not his family's</response>
        </member>
        <member name="T:WhatToBuy.Api.Controllers.User.UserController">
            <summary>
            Controller for user management endpoints
            </summary>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.User.UserController.Register(WhatToBuy.Api.Controllers.Models.UserRegistrationRequestDto)">
            <summary>
            Registers a new user
            </summary>
            <param name="registrationRequest">The user registration information</param>
            <returns>A success message if the registration was successful</returns>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.User.UserController.AddUserToRole(WhatToBuy.Api.Controllers.Models.UserAddToRoleDto)">
            <summary>
            Adds a user to a role.
            </summary>
            <returns>A response indicating whether the user was successfully added to the role.</returns>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.User.UserController.Get">
            <summary>
            Get details of a user.
            </summary>
            <response code="200">Returns a user details.</response>
            <response code="400">Returns an error response if the request is invalid.</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.User.UserController.GetAll">
            <summary>
            Get details of any user.
            </summary>
            <response code="200">Returns a user details.</response>
            <response code="400">Returns an error response if the request is invalid.</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.User.UserController.UpdateUser(WhatToBuy.Api.Controllers.Models.UserUpdateRequestDto)">
            <summary>
            Updates the name or family ID of a user.
            </summary>
            <response code="200">Returns a success message if the update was successful.</response>
            <response code="400">Returns an error response if the request is invalid or the update failed.</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.User.UserController.UpdateUser(System.String,WhatToBuy.Api.Controllers.Models.UserUpdateRequestDto)">
            <summary>
            Updates the name or family ID of any user.
            </summary>
            <param name="id">The ID of the user to update.</param>
            <param name="request">The request containing the new name and/or family ID.</param>
            <response code="200">Returns a success message if the update was successful.</response>
            <response code="400">Returns an error response if the request is invalid or the update failed.</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.User.UserController.ResetPassword(WhatToBuy.Api.Controllers.Models.ResetPasswordRequestDto)">
            <summary>
            Initiates a reset password sequence.
            </summary>
            <param name="request">UserName of a user that wants to reset his password.</param>
            <response code="200">Returns a success message reset email was successfully passed.</response>
            <response code="400">Returns an error response if the user is not found.</response>
        </member>
        <member name="M:WhatToBuy.Api.Controllers.User.UserController.ResetPassword(System.String,System.String,WhatToBuy.Api.Controllers.Models.NewPasswordDto)">
            <summary>
            Reset password from the link
            </summary>
            <param name="userId">User Id</param>
            <param name="token">Token</param>
            <param name="model">New password</param>
            <returns></returns>
        </member>
    </members>
</doc>
